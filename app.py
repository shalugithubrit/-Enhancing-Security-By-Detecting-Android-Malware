from flask import Flask, render_template
import matplotlib
matplotlib.use('Agg')
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import confusion_matrix
from tensorflow import keras
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score,precision_score, recall_score, f1_score

app = Flask(__name__, static_url_path='/static')

@app.route('/', methods=['GET'])
def run_home():
    return render_template('index.html')

@app.route('/program1', methods=['GET'])
def run_program1():
    data = pd.read_csv("dataset1.csv")
    print("Total missing values : ", sum(list(data.isna().sum())))
    classes,count = np.unique(data['class'],return_counts=True)
    
    # Perform Label Encoding
    lbl_enc = LabelEncoder()
    
    data = data.replace(classes,lbl_enc.fit_transform(classes))
    
    # Dataset contains special characters like ''?' and 'S'. Set them to NaN and use dropna() to remove them
    data = data.replace('[?,S]', np.NaN, regex=True)
    
    data.dropna(inplace=True)
    for c in data.columns:
        data[c] = pd.to_numeric(data[c])
    
    
    plt.bar(classes, count)
    plt.title("Class balance")
    plt.xlabel("Classes")
    plt.ylabel("Count")
    plt.savefig('static/class_balance.png')
    plt.close()
    
    train_x, test_x, train_y, test_y = train_test_split(data[data.columns[:len(data.columns)-1]].to_numpy(), data[data.columns[-1]].to_numpy(), test_size=0.2, shuffle=True)
    
    train_y = train_y.reshape((-1, 1))
    test_y = test_y.reshape((-1, 1))
    
    model = keras.models.Sequential()
    model.add(keras.layers.Dense(215, activation='relu', input_shape=(215,)))
    model.add(keras.layers.Dense(100, activation='relu'))
    model.add(keras.layers.Dense(1, activation='sigmoid'))
    model.summary()
    
    model.compile(optimizer=keras.optimizers.RMSprop(0.001),
                  loss='binary_crossentropy',
                  metrics=['accuracy'])
    
    ep = 5
    
    history = model.fit(train_x, train_y, validation_data=(test_x, test_y), epochs=ep)
    
    plt.figure(figsize=(15, 5))
    plt.subplot(1, 2, 1)
    plt.plot([str(i) for i in range(1, ep+1)], history.history['accuracy'], label="Train Accuracy")
    plt.plot([str(i) for i in range(1, ep+1)], history.history['val_accuracy'], label="Validation Accuracy")
    plt.legend()
    plt.xlabel("Epoch")
    plt.ylabel("Accuracy")
    plt.title("Epoch vs Train Loss")
    
    plt.savefig('static/epoch_vs_train_loss.png')
    plt.close()
    
    plt.subplot(1, 2, 2)
    plt.plot([str(i) for i in range(1, ep+1)], history.history['loss'], label="Train Loss")
    plt.plot([str(i) for i in range(1, ep+1)], history.history['val_loss'], label="Validation Loss")
    plt.legend()
    plt.xlabel("Epoch")
    plt.ylabel("Loss")
    plt.title("Epoch vs Validation loss")
    
    plt.savefig('static/epoch_vs_validation_loss.png')
    plt.close()
    
    y_pred = model.predict(test_x)
    for i in range(len(y_pred)):
        if y_pred[i] > (1-y_pred[i]):
            y_pred[i]=1
        else:
            y_pred[i]=0
    accuracy =accuracy_score(test_y,y_pred)*100
    precision =precision_score(test_y,y_pred)*100
    recall =recall_score(test_y,y_pred)*100
    f1=f1_score(test_y,y_pred)*100

    classes = ["B","S"]
    cm = confusion_matrix(y_pred,test_y)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=classes)
    fig, ax = plt.subplots(figsize=(10,10))
    plt.title("Confusion Matrix")
    disp = disp.plot(ax=ax)
    plt.savefig('static/confusion_matrix.png')
    return render_template('dataset1.html',accuracy=accuracy,precision=precision,recall=recall,f1=f1)

@app.route('/program2', methods=['GET'])
def run_program2():
    data = pd.read_csv("dataset2.csv")
    print("Total missing values : ", sum(list(data.isna().sum())))
    classes,count = np.unique(data['class'],return_counts=True)
    
    # Perform Label Encoding
    lbl_enc = LabelEncoder()
    
    data = data.replace(classes,lbl_enc.fit_transform(classes))
    
    # Dataset contains special characters like ''?' and 'S'. Set them to NaN and use dropna() to remove them
    data = data.replace('[?,S]', np.NaN, regex=True)
    
    data.dropna(inplace=True)
    for c in data.columns:
        data[c] = pd.to_numeric(data[c])
    
    
    plt.bar(classes, count)
    plt.title("Class balance")
    plt.xlabel("Classes")
    plt.ylabel("Count")
    plt.savefig('static/class_balance.png')
    plt.close()
    
    train_x, test_x, train_y, test_y = train_test_split(data[data.columns[:len(data.columns)-1]].to_numpy(), data[data.columns[-1]].to_numpy(), test_size=0.2, shuffle=True)
    
    train_y = train_y.reshape((-1, 1))
    test_y = test_y.reshape((-1, 1))
    
    model = keras.models.Sequential()
    model.add(keras.layers.Dense(215, activation='relu', input_shape=(215,)))
    model.add(keras.layers.Dense(100, activation='relu'))
    model.add(keras.layers.Dense(1, activation='sigmoid'))
    model.summary()
    
    model.compile(optimizer=keras.optimizers.RMSprop(0.001),
                  loss='binary_crossentropy',
                  metrics=['accuracy'])
    
    ep = 5
    
    history = model.fit(train_x, train_y, validation_data=(test_x, test_y), epochs=ep)
    
    plt.figure(figsize=(15, 5))
    plt.subplot(1, 2, 1)
    plt.plot([str(i) for i in range(1, ep+1)], history.history['accuracy'], label="Train Accuracy")
    plt.plot([str(i) for i in range(1, ep+1)], history.history['val_accuracy'], label="Validation Accuracy")
    plt.legend()
    plt.xlabel("Epoch")
    plt.ylabel("Accuracy")
    plt.title("Epoch vs Train Loss")
    
    plt.savefig('static/epoch_vs_train_loss.png')
    plt.close()
    
    plt.subplot(1, 2, 2)
    plt.plot([str(i) for i in range(1, ep+1)], history.history['loss'], label="Train Loss")
    plt.plot([str(i) for i in range(1, ep+1)], history.history['val_loss'], label="Validation Loss")
    plt.legend()
    plt.xlabel("Epoch")
    plt.ylabel("Loss")
    plt.title("Epoch vs Validation loss")
    
    plt.savefig('static/epoch_vs_validation_loss.png')
    plt.close()
    
    y_pred = model.predict(test_x)
    for i in range(len(y_pred)):
        if y_pred[i] > (1-y_pred[i]):
            y_pred[i]=1
        else:
            y_pred[i]=0
    accuracy =accuracy_score(test_y,y_pred)*100
    precision =precision_score(test_y,y_pred)*100
    recall =recall_score(test_y,y_pred)*100
    f1=f1_score(test_y,y_pred)*100

    classes = ["B","S"]
    cm = confusion_matrix(y_pred,test_y)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=classes)
    fig, ax = plt.subplots(figsize=(10,10))
    plt.title("Confusion Matrix")
    disp = disp.plot(ax=ax)
    plt.savefig('static/confusion_matrix.png')
    return render_template('dataset2.html',accuracy=accuracy,precision=precision,recall=recall,f1=f1)

if __name__ == '__main__':
    app.run(debug=True)